{"version":3,"sources":["timer.js","App.js","index.js"],"names":["DEFAULT_STATE","action","time_type","time_left","break_length","session_length","SettingChanger","props","className","id","sname","style","labelColor","charAt","toUpperCase","slice","Button","icon","visible","type","onClick","changer","Icon","name","setting","Pomo","state","timer","clip","getClockTime","bind","changeBreak","changeSession","startStop","tickTime","reset","audio","React","createRef","seconds","Math","floor","toString","padStart","value","new_break","this","setState","new_session","current","load","promise","play","undefined","then","_","catch","_error","setInterval","clearInterval","pause","currentTime","time","symbColor","color","canChange","visibility","border","clockRimStyle","borderColor","headColor","breakLabelColor","sessLabelColor","ref","src","Component","App","date","Date","todos","title","completed","newTodo","handleToggleAll","allToggled","every","todo","toggledTodos","map","handleInputChange","event","target","handleNewTodoKeyDown","length","keyCode","preventDefault","trim","handleDelete","i","withoutDeletedTodo","filter","t","index","handleClearCompleted","inCompleteTodos","placeholder","autoFocus","onChange","onKeyDown","htmlFor","display","Table","Header","Row","HeaderCell","Checkbox","checked","Body","key","positive","Cell","handleTodoClick","floated","compact","size","Footer","colSpan","renderNumbers","hourHandWidth","minuteHandWidth","minuteHandLength","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab833380.chunk.js","sourcesContent":["import React from 'react';\r\n//import { library } from '@fortawesome/fontawesome-svg-core';\r\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n//import { faPlay, faPause, faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\r\nimport { Button, Icon } from 'semantic-ui-react';\r\nimport './timer.css';\r\n\r\n//library.add( faPlay, faPause, faPlus, faMinus )\r\n\r\nconst SESSION = \"SESSION\";\r\nconst BREAK = \"BREAK\";\r\nconst DEFAULT_STATE = {action: \"\", time_type: SESSION, time_left: 50 * 60, break_length: 10, session_length: 50};\r\nconst BEEP = \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/3/success.mp3\";\r\n\r\n\r\nconst SettingChanger = props => {\r\n  return (\r\n     <div className=\"setting-cont\">\r\n       <div id={props.sname + \"-label\"} \r\n       style={props.labelColor}>\r\n         {props.sname.charAt(0).toUpperCase() + props.sname.slice(1)} </div>\r\n       <div className=\"setting-inner\">\r\n\r\n       <Button icon id={props.sname + \"-decrement\"} \r\n         style={props.visible}\r\n         type=\"button\" \r\n         onClick={()=>props.changer(-1)} >\r\n           <Icon name='minus' />\r\n           </Button>\r\n         <label id={props.sname + \"-length\"} \r\n         style={props.labelColor}> {props.setting}</label>\r\n        \r\n        <Button icon id={props.sname + \"-increment\"} \r\n         style={props.visible} \r\n         type=\"button\" \r\n         onClick={()=>props.changer(1)} >\r\n           <Icon name='plus' />\r\n           </Button>\r\n       </div>\r\n     </div>\r\n  );\r\n};\r\n\r\nclass Pomo extends React.Component {\r\n constructor(props){\r\n   super(props);\r\n   this.state = DEFAULT_STATE;\r\n   this.timer = \"\";\r\n   this.clip = \"\";\r\n   this.getClockTime = this.getClockTime.bind(this);\r\n   this.changeBreak = this.changeBreak.bind(this);\r\n   this.changeSession = this.changeSession.bind(this);\r\n   this.startStop= this.startStop.bind(this);\r\n   this.tickTime = this.tickTime.bind(this);\r\n   this.reset = this.reset.bind(this);\r\n   this.audio = React.createRef();\r\n   \r\n } \r\n  \r\n\r\n  getClockTime(seconds){\r\n      let min = (Math.floor(seconds/60)).toString().padStart(2,\"0\");\r\n    let sec = (seconds%60).toString().padStart(2,\"0\");\r\n    return min + \" : \" + sec; \r\n  }\r\n  \r\n  changeBreak(value){\r\n     let new_break = this.state.break_length + value;\r\n    if(new_break > 0 && new_break <= 60){\r\n      this.setState({action: \"\",\r\n         time_type: this.state.time_type,\r\n         time_left: this.state.time_left,\r\n         break_length: new_break, \r\n         session_length: this.state.session_length});\r\n    }\r\n  }\r\n  \r\n  changeSession(value){\r\n    let new_session = this.state.session_length + value;\r\n    if(new_session > 0 && new_session <= 60){\r\n      this.setState({action: \"\", \r\n       time_type: this.state.time_type, \r\n       time_left: new_session * 60,\r\n       break_length: this.state.break_length, \r\n       session_length: new_session});\r\n    }\r\n  }\r\n    \r\n  startStop(){\r\n    this.audio.current.load();\r\n     let promise = this.audio.current.play();\r\n    if (promise !== undefined) {\r\n      promise.then(_ => {\r\n      }).catch(_error => {\r\n      })\r\n    }\r\n    \r\n    if(this.timer === \"\"){\r\n       this.setState({action: \"playing\", \r\n       time_type: this.state.time_type,\r\n       time_left: this.state.time_left,\r\n       break_length: this.state.break_length,\r\n       session_length: this.state.session_length});\r\n      this.timer = setInterval(this.tickTime, 1000);\r\n    }\r\n    else{\r\n         this.setState({action: \"paused\",\r\n          time_type: this.state.time_type,\r\n          time_left: this.state.time_left,\r\n          break_length: this.state.break_length,\r\n          session_length: this.state.session_length});\r\n      clearInterval(this.timer);\r\n      this.timer = \"\";\r\n    }\r\n  }\r\n\r\n  tickTime(){\r\n if(this.state.time_left === 0){\r\n   let promise = this.audio.current.play();\r\n    if (promise !== undefined) {\r\n      promise.then(_ => {\r\n      }).catch(_error => {\r\n      })\r\n    }\r\n      if(this.state.time_type === SESSION){\r\n        this.setState({action: this.state.action,\r\n           time_type: BREAK,\r\n           time_left: this.state.break_length * 60,\r\n           break_length: this.state.break_length,\r\n           session_length: this.state.session_length});\r\n      }\r\n      else{\r\n         this.setState({action: this.state.action,\r\n           time_type: SESSION,\r\n           time_left: this.state.session_length * 60, \r\n           break_length: this.state.break_length,\r\n           session_length: this.state.session_length});\r\n      }\r\n    }\r\n    else{\r\n      this.setState({action: this.state.action,\r\n        time_type: this.state.time_type, \r\n        time_left: this.state.time_left -1,\r\n        break_length: this.state.break_length, \r\n        session_length: this.state.session_length});\r\n    }\r\n  }\r\n  \r\n   reset(){\r\n    this.audio.current.pause();\r\n    this.audio.current.currentTime = 0;\r\n    if(this.timer !== \"\"){\r\n      clearInterval(this.timer); \r\n      this.timer = \"\";\r\n    }\r\n    this.setState(DEFAULT_STATE);\r\n  }\r\n  \r\n  render(){\r\n    let time = this.getClockTime(this.state.time_left);\r\n    /*let symbol = \r\n      <Button Icon >\r\n        <Icon name='play' />\r\n      </Button> ; */\r\n    \r\n    let symbColor = {color: \"Chartreuse\"};\r\n    let canChange = {visibility: \"visible\"}; \r\n    let color = \"Chartreuse\"; \r\n    let border = \"Chartreuse\";\r\n    if(this.state.action !== \"\"){\r\n      canChange.visibility = \"hidden\";\r\n    }\r\n    if(this.state.action === \"playing\"){\r\n      border = \"Chartreuse\";\r\n     /* symbol =\r\n      <Button Icon >\r\n        <Icon name='pause' />\r\n      </Button> ; */\r\n      \r\n      symbColor.color = \"Chartreuse\";\r\n      \r\n    }\r\n    if (this.state.action === \"paused\"){\r\n      border = \"orchid\";\r\n      color = \"orchid\";\r\n      symbColor.color = \"orchid\";\r\n    }\r\n    let clockRimStyle = {color: color, borderColor: border};\r\n    let headColor = {color: border};\r\n    let breakLabelColor = {color: \"Chartreuse\"};\r\n    let sessLabelColor =  {color: \"Chartreuse\"};\r\n    if(this.state.action !== \"\" && this.state.time_type === SESSION){\r\n      sessLabelColor.color = border;\r\n    }\r\n    else if (this.state.action !== \"\" && this.state.time_type === BREAK){\r\n      breakLabelColor.color = border;\r\n    }\r\n return(\r\n <div id=\"clock-outer\">\r\n   \r\n   <audio ref={this.audio} id=\"beep\" src={BEEP}/>\r\n   <div id=\"center\">\r\n   \r\n     <SettingChanger \r\n     sname=\"break\" \r\n     setting={this.state.break_length} \r\n     changer={this.changeBreak} \r\n     visible={canChange} \r\n     labelColor={breakLabelColor}\r\n     />\r\n     <div id=\"timer-cont\">\r\n       <div id=\"time-center\"\r\n        style={clockRimStyle}>\r\n          <h3 id=\"timer-label\" style={headColor}>\r\n            {this.state.time_type}\r\n          </h3>\r\n          <span id=\"time-left\">{time}</span>\r\n        \r\n\r\n          <div id=\"clock-functions-cont\" >\r\n           <Button Icon id=\"start_stop\" \r\n            type=\"button\" \r\n            style={symbColor}\r\n            onClick={this.startStop} >\r\n              <Icon name='play' />\r\n           </Button>\r\n\r\n           <Button icon id=\"reset\" \r\n           type=\"button\" \r\n           style={symbColor}\r\n           onClick={this.reset} >\r\n             <Icon name='redo' />\r\n             </Button>\r\n         </div>\r\n     </div>\r\n  </div>\r\n     <SettingChanger \r\n     sname=\"session\" \r\n     setting={this.state.session_length} \r\n     changer={this.changeSession} \r\n     visible={canChange} \r\n     labelColor={sessLabelColor}\r\n     />\r\n     </div>\r\n     \r\n     </div>\r\n     );\r\n  }\r\n}\r\n\r\n// line 223  <i className={symbol}></i>\r\n/*  <div id=\"clock-functions-cont\" >\r\n           <Button icon id=\"start_stop\" \r\n            type=\"button\" \r\n            onClick={this.startStop} >\r\n              <Icon name={symbol}/>\r\n             \r\n           </Button>\r\n           <Button icon id=\"reset\" \r\n           type=\"button\" \r\n           onClick={this.reset} >\r\n             <Icon name='redo' />\r\n             </Button>\r\n         </div>   */\r\nexport default Pomo;     ","import React, { Component } from 'react';\nimport './App.css';\nimport Pomo from './timer.js';\nimport Clock from 'react-clock';\nimport { Table, Checkbox, Button } from 'semantic-ui-react';\n\n\nclass App extends Component {\n  \n  state = {\n    date: new Date(),\n    todos: [\n      { title: 'Make Coffee!', completed: false },\n      { title: 'Take 3 Deep Breaths', completed: false },\n      { title: 'Begin...', completed: false },\n    ],\n    newTodo: '',\n   \n  }\n //clock.\n componentDidMount() {\n    setInterval(\n      () => this.setState({ date: new Date() }),\n      1000\n    );\n  }\n//Toggle button handler.\n handleToggleAll = () => {\n   const [...todos] = this.state.todos\n   const allToggled = todos.every(todo => todo.completed)\n   const toggledTodos = todos.map(todo => ({\n     ...todo,\n     completed: !allToggled\n   }))\n   this.setState({ todos: toggledTodos })\n }\n//Todo Handler.\n handleTodoClick(todo, index)  {\n  const { completed } = todo   \n  const [...todos] = this.state.todos\n  todos[index] = {\n     ...todo,\n     completed: !completed \n    }\n  this.setState({ todos })\n}\n//Input Handler.\nhandleInputChange = event => {\n  const value = event.target.value\n  this.setState({ newTodo: value })\n}\n//key down Handler.\nhandleNewTodoKeyDown = event => {\n  if (this.state.todos.length >= 11) {\n    //no more than 11 things to do.\n    return\n  }\n  if (event.keyCode !== 13 ) { // 13 = enter key.\n    return\n  }\n  event.preventDefault()\n\n  const { newTodo, todos } = this.state\n  const value = newTodo.trim()\n  if (value) {\n    this.setState({\n      todos: [\n        ...todos,\n         { title: value, completed: false }\n      ],\n      newTodo: '',\n    })\n  }\n}\n//Delete Handler.\nhandleDelete = (todo, i) => {\n   const { todos } = this.state\n   const withoutDeletedTodo = todos.filter(\n     (t, index) => \n     index !== i,\n   )\n   this.setState({ todos: withoutDeletedTodo })\n}\n//Clear completed handler.\nhandleClearCompleted = () => {\n  const { todos } = this.state\n  const inCompleteTodos = todos.filter(todo => !todo.completed)\n  this.setState({ todos: inCompleteTodos })\n}\n\n  render() {\n    const { todos, newTodo } = this.state\n    const allToggled = todos.every(todo => todo.completed)\n     return(\n    <div className=\"app\">\n        <div className=\"todo-container\"> \n        <input \n        id=\"new-todo\" \n        className=\"new-todo\" \n        placeholder=\"  What Needs To Be Done ?\"\n        autoFocus\n        value={this.state.newTodo}\n        onChange={this.handleInputChange}\n        onKeyDown={this.handleNewTodoKeyDown}\n        />\n        <label htmlFor=\"new-todo\" \n        style={{ display: 'none' }}> New Todo </label>\n       { todos.length === 0 ? \n       (  <div>  <br/>  ... You Have Nothing To Do - Hooray! </div> \n               ) : ( \n        <Table>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>\n                <Checkbox \n                checked={allToggled}\n                onChange={this.handleToggleAll}\n                 />\n              </Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n        <Table.Body>\n        {this.state.todos.map((todo, i) => (\n          <Table.Row \n          key={i}\n          positive={todo.completed} >\n          <Table.Cell>\n           <Checkbox \n            checked={todo.completed}\n            onChange={() => \n              this.handleTodoClick(todo, i)\n            }\n           />\n          </Table.Cell>\n          <Table.Cell>\n          { todo.title }\n          <Button\n           color=\"red\"\n           icon=\"trash\"\n           floated=\"right\"\n           compact\n           size=\"small\"\n           onClick={() => this.handleDelete(todo, i)}\n          />\n          </Table.Cell>\n        </Table.Row>\n        ))}\n        </Table.Body>\n        \n       <Table.Footer>\n         <Table.Row>\n           <Table.HeaderCell colSpan=\"2\">\n             <Button\n             size=\"small\"\n             onClick={this.handleClearCompleted}\n             >Clear Completed</Button>\n           </Table.HeaderCell>\n         </Table.Row>\n       </Table.Footer>\n       </Table>\n          )\n       }\n        \n      </div>\n        <div className=\"clock\"> \n        <Clock\n          value={this.state.date}\n          renderNumbers={true}\n          size={230}\n          hourHandWidth={7}\n          minuteHandWidth={4}\n          minuteHandLength={80}\n\n        />\n         </div>\n      <div className=\"timer\">\n        <Pomo \n        />\n         </div>\n    </div>\n     );\n    \n   \n  }   \n\n  \n}\n\n//setInterval({tick}, 1000);\n\nexport default App;\n\n\n/*  line 82\n <div class=\"ui checked checkbox\">\n               <input type=\"checkbox\" checked=\"\" /> \n                <label>Active</label> \n                </div>\n                </Checkbox>\n\n<tr>\n     <th>\n     <div class=\"ui checked checkbox\">\n        <input type=\"checkbox\" checked=\"\" />         \n      </div> \n     </th>\n     <th>\n       { props.children }\n       <i class=\"trash alternate icon\" color=\"red\" floated=\"right\"></i>\n     </th>\n   </tr>\n)\n\n<table class=\"ui definition table\">\n          <thead>\n            <tr>\n              <th>\n              <div class=\"ui checked checkbox\">\n               <input type=\"checkbox\" checked=\"\" /> \n                <label>Active</label> \n                </div>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n          {this.state.todos.map((todo, i) => (\n          <TodoItem key={i}>{ todo } </TodoItem>\n        ))}\n          </tbody>\n        </table>  */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-clock';\n\n// import './timer';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';   R\n\nReactDOM.render( <App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// serviceWorker.unregister();  R\n"],"sourceRoot":""}